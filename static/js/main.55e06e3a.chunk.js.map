{"version":3,"sources":["context/AppContextProvider.jsx","context/UserContextProvider.jsx","modules/fetchModule.js","comps/Todo/TodoMain.jsx","comps/Todo/TodoList.jsx","comps/Todo/TodoInput.jsx","comps/Todo/TodoItem.jsx","comps/Login.jsx","comps/LogoutButton.jsx","comps/Logout.jsx","comps/LoginRoute.jsx","comps/AuthRoute.jsx","comps/Button/GoogleButton.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","useTodoContext","useContext","AppContextProvider","children","useState","t_comp","todo","setTodo","todoList","setTodoList","nextId","useRef","inputId","todoClear","t_id","current","t_text","todoInsert","alert","focus","todoDelete","id","_todoList","filter","item","console","table","providerData","onChange","e","target","value","onClick","onKeyPress","key","completeToggle","Number","dataset","code","index","findIndex","selectTodo","onDeleteClick","window","confirm","Provider","UserContext","useUserContext","UserContextProvider","propsData","user","setUser","fetchOption","method","headers","credentials","fetchLogin","userid","password","a","body","JSON","stringify","fetch","response","ok","json","fetchLogout","TodoMain","header","form","className","LogoutButton","TodoList","viewList","map","length","TodoInput","name","ref","placeholder","TodoItem","data-code","Login","account","setAccount","history","useHistory","onLogin","result","replace","type","push","Logout","fetch_logout","useCallback","useEffect","LoginRoute","basename","ProcessingInstruction","env","PUBLIC_URL","AuthRoute","fetchCallBack","gapi","auth2","init","client_id","scope","getAuthInstance","currentUser","get","googleUser","getBasicProfile","profile","email","getEmail","getId","getName","image","getImageUrl","Token","getAuthResponse","id_token","GoogleButton","buttonRef","googleResponse","login_source","load","isSignedIn","log","attachClickHandler","error","disconnect","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55e06e3a.chunk.js","sourcesContent":["import { createContext, useContext, useRef, useState } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport const useTodoContext = () => useContext(AppContext);\r\n\r\nconst AppContextProvider = ({ children }) => {\r\n  const [todo, setTodo] = useState({\r\n    t_comp: false,\r\n  });\r\n  const [todoList, setTodoList] = useState([]);\r\n  const nextId = useRef(0);\r\n  const inputId = useRef();\r\n\r\n  const onChange = (e) => {\r\n    const t_text = e.target.value;\r\n    setTodo({ ...todo, t_text });\r\n  };\r\n  const onClick = () => {\r\n    todoInsert();\r\n  };\r\n\r\n  const todoClear = () =>\r\n    setTodo({ t_id: nextId.current, t_text: \"\", t_comp: false });\r\n\r\n  const todoInsert = () => {\r\n    if (todo.t_text == null || todo.t_text === \"\") {\r\n      alert(\"할 일을 입력하세요\");\r\n      inputId.current.focus();\r\n      return;\r\n    }\r\n    setTodoList([...todoList, { ...todo, t_id: nextId.current }]);\r\n    nextId.current++;\r\n    todoClear();\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      todoInsert();\r\n    } else if (e.key === \"Escape\") {\r\n      todoClear();\r\n    }\r\n  };\r\n\r\n  const completeToggle = (e) => {\r\n    const id = Number(e.target.dataset.code);\r\n\r\n    const index = todoList.findIndex((item) => item.t_id === id);\r\n\r\n    const selectTodo = todoList[index];\r\n    const _todoList = [...todoList];\r\n    _todoList[index] = {\r\n      ...selectTodo,\r\n      t_comp: !selectTodo.t_comp,\r\n    };\r\n    setTodoList(_todoList);\r\n\r\n    alert(\"complete\");\r\n  };\r\n\r\n  const onDeleteClick = (e) => {\r\n    const id = e.target.dataset.code;\r\n    if (window.confirm(\"삭제할까요?\")) {\r\n      todoDelete(id);\r\n    }\r\n  };\r\n  const todoDelete = (id) => {\r\n    const _todoList = todoList.filter((item) => item.t_id != id);\r\n    console.table(_todoList);\r\n    setTodoList(_todoList);\r\n    console.table(todoList);\r\n  };\r\n\r\n  const providerData = {\r\n    todo,\r\n    todoList,\r\n    inputId,\r\n    onChange,\r\n    onClick,\r\n    onKeyPress,\r\n\r\n    completeToggle,\r\n    onDeleteClick,\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={providerData}>{children}</AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppContextProvider;\r\n","import React, { createContext, useContext, useState } from \"react\";\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUserContext = () => useContext(UserContext);\r\n\r\nconst UserContextProvider = ({ children }) => {\r\n  const [user, setUser] = useState({});\r\n\r\n  const propsData = {\r\n    user,\r\n    setUser,\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={propsData}>{children}</UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContextProvider;\r\n","const fetchOption = {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n  },\r\n  credentials: \"include\",\r\n};\r\n\r\nconst fetchUser = async () => {\r\n  const response = await fetch(\"http://localhost:8000/users\", {\r\n    fetchOption,\r\n  });\r\n  if (response?.ok) return await response.json();\r\n  else return [];\r\n};\r\n\r\nconst fetchLogin = async (userid, password) => {\r\n  // 이미 선언된 fetchOption에 body 속성을 추가하기\r\n  fetchOption.body = JSON.stringify({ userid, password });\r\n  const response = await fetch(\r\n    \"http://localhost:8000/users/login\",\r\n    fetchOption\r\n  );\r\n  if (response?.ok) return await response.json();\r\n  else {\r\n    alert(\"Login Fail\");\r\n    return [];\r\n  }\r\n};\r\n\r\nconst fetchLogout = async () => {\r\n  const response = await fetch(\"http://localhost:8000/users/logout\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n    },\r\n    credentials: \"include\",\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport { fetchUser, fetchLogin, fetchLogout };\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { LogoutButton } from \"..\";\r\nimport {\r\n  AppContextProvider,\r\n  UserContextProvider,\r\n  useUserContext,\r\n} from \"../../context\";\r\nimport \"../../css/TodoMain.css\";\r\nimport { fetchUser } from \"../../modules/fetchModule.js\";\r\n\r\nconst TodoMain = ({ header, form, children }) => {\r\n  //   const history = useHistory();\r\n\r\n  const { user } = useUserContext();\r\n\r\n  //   const fetchLoginUser = useCallback(async () => {\r\n  //     const resultUser = await fetchUser();\r\n  //     if (resultUser?.userid) await setUser(resultUser);\r\n  //     else history.replace(\"/\");\r\n  //   }, [setUser]);\r\n\r\n  //   useEffect(fetchLoginUser, [fetchLoginUser]);\r\n\r\n  return (\r\n    <AppContextProvider>\r\n      <UserContextProvider>\r\n        <div className=\"todo_main\">\r\n          <main className=\"todo_main_layout\">\r\n            <div className=\"title\">\r\n              {header}\r\n              <LogoutButton>{user.userid}</LogoutButton>\r\n            </div>\r\n            <section className=\"form_wrapper\">{form}</section>\r\n            <section className=\"list_wrapper\">{children}</section>\r\n          </main>\r\n        </div>\r\n      </UserContextProvider>\r\n    </AppContextProvider>\r\n  );\r\n};\r\n\r\nexport default TodoMain;\r\n","import React from \"react\";\r\n// import { useTodoContext } from \"../context/AppContextProvider\";\r\n// import TodoItem from \"./TodoItem\";\r\nimport { useTodoContext } from \"../../context\";\r\nimport { TodoItem } from \"..\";\r\n\r\nconst TodoList = () => {\r\n  const { todoList } = useTodoContext();\r\n\r\n  const viewList = todoList.map((todo) => {\r\n    return <TodoItem todo={todo} />;\r\n  });\r\n  return (\r\n    <div className=\"todo_list\">\r\n      {todoList.length > 0 ? viewList : <p>Noting todo in List!</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","// import { useTodoContext } from \"../context/AppContextProvider\";\r\n// import \"../css/TodoInput.css\";\r\nimport { useTodoContext } from \"../../context\";\r\nimport \"../../css/TodoInput.css\";\r\n\r\nconst TodoInput = () => {\r\n  const { todo, inputId, onChange, onClick, onKeyPress } = useTodoContext();\r\n\r\n  return (\r\n    <div className=\"todo_input\">\r\n      <input\r\n        name=\"t_text\"\r\n        ref={inputId}\r\n        value={todo.t_text}\r\n        placeholder=\"TODAY TO-DO\"\r\n        onChange={onChange}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <div className=\"btn_insert\" onClick={onClick}>\r\n        ENTER\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React from \"react\";\r\nimport { useTodoContext } from \"../../context\";\r\nimport \"../../css/TodoItem.css\";\r\n\r\nconst TodoItem = ({ todo }) => {\r\n  const { t_id, t_text, t_comp } = todo;\r\n  const { onDeleteClick, completeToggle } = useTodoContext();\r\n  return (\r\n    <div className=\"todo_item\">\r\n      <div className=\"todo_delete\" onClick={onDeleteClick} data-code={t_id}>\r\n        &times;\r\n      </div>\r\n      <div\r\n        className={`todo_text ${t_comp && \"checked\"}`}\r\n        onClick={completeToggle}\r\n        data-code={t_id}\r\n      >\r\n        {t_text}\r\n      </div>\r\n      {/* 현재 todo의 t_comp 값이 true 일대만 이 tag가 나타나도록 하라 */}\r\n      {t_comp && <div className=\"check_mark\">&#x2713;</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useUserContext } from \"../context\";\r\nimport { fetchLogin } from \"../modules/fetchModule.js\";\r\nimport \"../css/TodoLogin.css\";\r\nimport { GoogleButton } from \".\";\r\n\r\nexport default function Login() {\r\n  const [account, setAccount] = useState({\r\n    userid: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const { setUser } = useUserContext();\r\n\r\n  const history = useHistory();\r\n\r\n  const onChange = (e) =>\r\n    setAccount({ ...account, [e.target.name]: e.target.value });\r\n\r\n  const onBtnClick = () => {\r\n    if (account.userid === \"\" || account.password === \"\") {\r\n      alert(\"아이디와 비밀번호를 입력해주세요!\");\r\n    } else {\r\n      onLogin();\r\n    }\r\n  };\r\n\r\n  const onLogin = async (e) => {\r\n    const { userid, password } = account;\r\n    const result = await fetchLogin(userid, password);\r\n    await setUser(result);\r\n    history.replace(\"/\");\r\n  };\r\n  return (\r\n    <div className=\"todo_login\">\r\n      <div className=\"login_title\">Login</div>\r\n      <div className=\"login_wrapper\">\r\n        <input name=\"userid\" onChange={onChange} placeholder=\"ID\" />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          onChange={onChange}\r\n          placeholder=\"PASSWORD\"\r\n        />\r\n        <button className=\"btn_login\" onClick={onBtnClick}>\r\n          LOGIN\r\n        </button>\r\n        <GoogleButton />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport default function LogoutButton({ children }) {\r\n  const history = useHistory();\r\n  const btn_logout = () => {\r\n    history.push(\"/logout\");\r\n  };\r\n  return (\r\n    <div onClick={btn_logout} className=\"btn_logout\">\r\n      {children ? children : \"hello\"}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useUserContext } from \"../context\";\r\nimport { fetchLogout } from \"../modules/fetchModule\";\r\n\r\nfunction Logout() {\r\n  const history = useHistory();\r\n  const { user, setUser } = useUserContext();\r\n  const fetch_logout = useCallback(async () => {\r\n    await fetchLogout();\r\n    await setUser([]);\r\n    history.replace(\"/login\");\r\n  }, [setUser]);\r\n\r\n  useEffect(fetch_logout, [fetch_logout]);\r\n  return (\r\n    <div>\r\n      <>{!user?.userid && user.userid}</>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst LoginRoute = ({ children }) => {\r\n  return (\r\n    <BrowserRouter basename={ProcessingInstruction.env.PUBLIC_URL}>\r\n      {children}\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default LoginRoute;\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useUserContext } from \"../context\";\r\n\r\nfunction AuthRoute({ children }) {\r\n  const { setUser } = useUserContext();\r\n  const history = useHistory();\r\n\r\n  //   const fetchCallBack = useCallback(async () => {\r\n  //     const resultUser = await fetchUser();\r\n  //     if (!resultUser?.userid) history.replace(\"/login\");\r\n  //     await setUser(resultUser);\r\n  //   });\r\n  const fetchCallBack = useCallback(async () => {\r\n    await window.gapi.auth2.init({\r\n      client_id:\r\n        \"143239812932-pq6856bf5pqql89i17a38vpl11ne8v5p.apps.googleusercontent.com\",\r\n      scope: \"profile email\",\r\n    });\r\n    if (!window.gapi) {\r\n      alert(\"GOOGLE API NOT FOUND\");\r\n    }\r\n\r\n    // gapi(google API)로 부터 auth2 객체를 조회하기\r\n    const auth2 = await window?.gapi?.auth2.getAuthInstance();\r\n\r\n    if (!auth2) {\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    // 로그인되어있는 사용자 정보 getter\r\n    const googleUser = await auth2.currentUser.get();\r\n    const profile = await googleUser.getBasicProfile();\r\n\r\n    if (!profile) {\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    const user = {\r\n      email: profile.getEmail(),\r\n      id: profile.getId(),\r\n      name: profile.getName(),\r\n      image: profile.getImageUrl(),\r\n      Token: googleUser.getAuthResponse().id_token,\r\n    };\r\n\r\n    await setUser(user);\r\n  }, [history, setUser]);\r\n\r\n  useEffect(fetchCallBack, [fetchCallBack]);\r\n\r\n  return <>{children}</>;\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useUserContext } from \"../../context\";\r\nimport \"../../css/GoogleButton.css\";\r\n\r\nfunction GoogleButton() {\r\n  const buttonRef = useRef();\r\n\r\n  const { setUser } = useUserContext();\r\n\r\n  const history = useHistory();\r\n\r\n  const googleResponse = (result) => {\r\n    const profile = result.getBasicProfile();\r\n    const email = profile.getEmail();\r\n    const id = profile.getId();\r\n    const name = profile.getName();\r\n    const image = profile.getImageUrl();\r\n\r\n    const Token = result.getAuthResponse().id_token;\r\n    setUser({ userid: email, login_source: \"GOOGLE\" });\r\n    alert(email + \" Hello~\");\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  /*\r\n\tpublic/index.html 파일에 script를 import 한다\r\n\tsrc=\"http://apis.google.com/js/api:client.js\"\r\n\t*/\r\n  const googleSDK_init = () => {\r\n    if (!window.gapi) {\r\n      alert(\"GOOGLE API NOT FOUND\");\r\n      return;\r\n    }\r\n\r\n    //   alert(\"GOOGLE API OK\");\r\n    // google API가 활성화되고 활성화된 API중에서 auth2가 loading(사용할 준비가 되면)\r\n    // gapi : google cloud service를 JS에서 사용하기 위한 객체 도구\r\n    // gapi의 load() 함수를 사용하여 auth2 객체를 초기화하기\r\n    // 이때 google로 부터 부여받은 client_id를 입력한다\r\n    window.gapi.load(\"auth2\", async () => {\r\n      // load() 함수에 의해서 auth2 객체가 초기화 된다\r\n      // auth2 객체 : google cloud service를 사용한 oAuth2 인증시스템에 접근할 수 있는 객체\r\n      // google로 로그인을 구현하기 위한 초기화 절차\r\n      const auth2 = await window.gapi.auth2.init({\r\n        client_id:\r\n          \"143239812932-pq6856bf5pqql89i17a38vpl11ne8v5p.apps.googleusercontent.com\",\r\n        scope: \"profile email\",\r\n      });\r\n\r\n      if (auth2?.isSignedIn.get()) {\r\n        console.log(\"Already Login Now\");\r\n        // 원하는 곳으로 redirect\r\n      }\r\n\r\n      // 버튼을 클릭했을때\r\n      // google 로그인 창이 뜨도록 하는 click event 핸들러 설정\r\n      // buttonRef 가 ref로 설정된 컴포넌트(button 등)에 클릭 이벤트를 설정하고\r\n      // 해당 컴포넌트를 클릭하면 google 로그인 창이 뜨도록 설정하기\r\n      // \tattachClickHandler\r\n      //   auth2.attachClickHandler(buttonRef.current, {});\r\n      // google login 창이 popup 되고, id를 선택하여, 정상적으로 로그인이 수행되면\r\n      // 로그인 이후 작동되는 callback 함수를 3번째 매개변수로 설정한다\r\n      //   await auth2.attachClickHandler(buttonRef.current, {}, googleResponse);\r\n      // google login 창이 popup 된 후 그냥 창을 닫거나 또는 정상적으로 로그인이 수행되지 않았을때\r\n      // 실행되는 함수를 4번째 매개변수로 설정한다\r\n      // 1번째 매개변수 : 누구를 클릭했을때\r\n      // 2번째 매개변수 : 옵션\r\n      // 3번째 매개변수 : 로그인이 성공했을때 실행할 함수\r\n      // 4번째 매개변수 : 로그인이 실패했을때 실행할 함수\r\n      await auth2.attachClickHandler(\r\n        buttonRef.current,\r\n        {},\r\n        googleResponse,\r\n        (error) => {\r\n          alert(JSON.stringify(error));\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  useEffect(googleSDK_init, []);\r\n\r\n  const logout = () => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance();\r\n    auth2?.disconnect();\r\n    alert(\"Logout OK\");\r\n  };\r\n\r\n  return (\r\n    <div id=\"buttonWrapper\">\r\n      <div id=\"myGoogleBtn\" ref={buttonRef}>\r\n        <span className=\"icon\"></span>\r\n        <span className=\"buttonText\">Google Login</span>\r\n      </div>\r\n      <span className=\"buttonText\" onClick={logout}>\r\n        Google Logout\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleButton;\r\n","import \"./App.css\";\r\nimport {\r\n  TodoMain,\r\n  TodoInput,\r\n  TodoList,\r\n  Login,\r\n  AuthRoute,\r\n  Logout,\r\n} from \"./comps\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport { LoginRoute } from \"./comps\";\r\nimport { UserContextProvider } from \"./context\";\r\n\r\nfunction App() {\r\n  return (\r\n    <UserContextProvider>\r\n      <LoginRoute>\r\n        <Route path=\"/login\" exact>\r\n          <Login />\r\n        </Route>\r\n        <Route path=\"/\" exact>\r\n          <AuthRoute>\r\n            <TodoMain header=\"TODO LIST\" form={<TodoInput />}>\r\n              <TodoList />\r\n            </TodoMain>\r\n          </AuthRoute>\r\n        </Route>\r\n        <Route path=\"/logout\" exact>\r\n          <Logout />\r\n        </Route>\r\n      </LoginRoute>\r\n    </UserContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}